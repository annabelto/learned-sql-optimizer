                                                                                                                                              QUERY PLAN                                                                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=71103.30..71103.45 rows=60 width=77)
   Sort Key: customer.c_last_name, customer.c_first_name, customer.c_salutation, customer.c_preferred_cust_flag DESC, store_sales.ss_ticket_number
   ->  Nested Loop  (cost=70554.69..71101.53 rows=60 width=77)
         ->  Finalize GroupAggregate  (cost=70554.39..70622.33 rows=60 width=16)
               Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
               Filter: ((count(*) >= 15) AND (count(*) <= 20))
               ->  Gather Merge  (cost=70554.39..70610.84 rows=450 width=16)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=69554.37..69558.87 rows=225 width=16)
                           Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
                           ->  Sort  (cost=69554.37..69554.93 rows=225 width=8)
                                 Sort Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
                                 ->  Hash Join  (cost=2685.75..69545.58 rows=225 width=8)
                                       Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                       ->  Hash Join  (cost=2684.36..69543.36 rows=237 width=12)
                                             Hash Cond: (store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk)
                                             ->  Parallel Hash Join  (cost=2427.25..69276.66 rows=3650 width=16)
                                                   Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                   ->  Parallel Seq Scan on store_sales  (cost=0.00..63698.56 rows=1200256 width=20)
                                                   ->  Parallel Hash  (cost=2425.54..2425.54 rows=137 width=4)
                                                         ->  Parallel Seq Scan on date_dim  (cost=0.00..2425.54 rows=137 width=4)
                                                               Filter: ((d_year = ANY ('{2000,2001,2002}'::integer[])) AND (((d_dom >= 1) AND (d_dom <= 3)) OR ((d_dom >= 25) AND (d_dom <= 28))))
                                             ->  Hash  (cost=251.00..251.00 rows=489 width=4)
                                                   ->  Seq Scan on household_demographics  (cost=0.00..251.00 rows=489 width=4)
                                                         Filter: ((hd_vehicle_count > 0) AND ((hd_buy_potential = '1001-5000'::bpchar) OR (hd_buy_potential = '0-500'::bpchar)) AND ((CASE WHEN (hd_vehicle_count > 0) THEN (hd_dep_count / hd_vehicle_count) ELSE NULL::integer END)::numeric > 1.2))
                                       ->  Hash  (cost=1.24..1.24 rows=12 width=4)
                                             ->  Seq Scan on store  (cost=0.00..1.24 rows=12 width=4)
                                                   Filter: ((s_county)::text = ANY ('{"Williamson County","Williamson County","Williamson County","Williamson County","Williamson County","Williamson County","Williamson County","Williamson County"}'::text[]))
         ->  Index Scan using customer_pkey on customer  (cost=0.29..7.98 rows=1 width=69)
               Index Cond: (c_customer_sk = store_sales.ss_customer_sk)
(30 rows)

