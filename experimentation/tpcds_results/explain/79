                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=77151.08..77151.33 rows=100 width=152)
   ->  Sort  (cost=77151.08..77162.42 rows=4534 width=152)
         Sort Key: customer.c_last_name, customer.c_first_name, (substr((ms.s_city)::text, 1, 30)), ms.profit
         ->  Merge Join  (cost=71270.87..76977.80 rows=4534 width=152)
               Merge Cond: (customer.c_customer_sk = ms.ss_customer_sk)
               ->  Index Scan using customer_pkey on customer  (cost=0.29..5377.87 rows=100000 width=56)
               ->  Sort  (cost=71270.58..71281.91 rows=4534 width=79)
                     Sort Key: ms.ss_customer_sk
                     ->  Subquery Scan on ms  (cost=70308.84..70995.21 rows=4534 width=79)
                           ->  Finalize GroupAggregate  (cost=70308.84..70949.87 rows=4534 width=83)
                                 Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, store.s_city
                                 ->  Gather Merge  (cost=70308.84..70806.30 rows=3778 width=83)
                                       Workers Planned: 2
                                       ->  Partial GroupAggregate  (cost=69308.81..69370.21 rows=1889 width=83)
                                             Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, store.s_city
                                             ->  Sort  (cost=69308.81..69313.54 rows=1889 width=28)
                                                   Sort Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, store.s_city
                                                   ->  Hash Join  (cost=2343.24..69206.02 rows=1889 width=28)
                                                         Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                         ->  Hash Join  (cost=2341.91..69197.74 rows=1982 width=25)
                                                               Hash Cond: (store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk)
                                                               ->  Parallel Hash Join  (cost=2104.41..68953.83 rows=2444 width=29)
                                                                     Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                     ->  Parallel Seq Scan on store_sales  (cost=0.00..63698.56 rows=1200256 width=33)
                                                                     ->  Parallel Hash  (cost=2103.26..2103.26 rows=92 width=4)
                                                                           ->  Parallel Seq Scan on date_dim  (cost=0.00..2103.26 rows=92 width=4)
                                                                                 Filter: ((d_dow = 1) AND (d_year = ANY ('{2000,2001,2002}'::integer[])))
                                                               ->  Hash  (cost=161.00..161.00 rows=6120 width=4)
                                                                     ->  Seq Scan on household_demographics  (cost=0.00..161.00 rows=6120 width=4)
                                                                           Filter: ((hd_dep_count = 7) OR (hd_vehicle_count > '-1'::integer))
                                                         ->  Hash  (cost=1.18..1.18 rows=12 width=11)
                                                               ->  Seq Scan on store  (cost=0.00..1.18 rows=12 width=11)
                                                                     Filter: ((s_number_employees >= 200) AND (s_number_employees <= 295))
(33 rows)

