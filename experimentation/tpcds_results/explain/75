                                                                                                                                       QUERY PLAN                                                                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=310120.49..310120.49 rows=1 width=80)
   CTE all_sales
     ->  GroupAggregate  (cost=284239.83..307899.97 rows=48534 width=60)
           Group Key: date_dim.d_year, item.i_brand_id, item.i_class_id, item.i_category_id, item.i_manufact_id
           ->  Unique  (cost=284239.83..293946.55 rows=485336 width=56)
                 ->  Sort  (cost=284239.83..285453.17 rows=485336 width=56)
                       Sort Key: date_dim.d_year, item.i_brand_id, item.i_class_id, item.i_category_id, item.i_manufact_id, ((store_sales.ss_quantity - COALESCE(store_returns.sr_return_quantity, 0))), ((store_sales.ss_ext_sales_price - COALESCE(store_returns.sr_return_amt, 0.0)))
                       ->  Gather  (cost=7371.40..221813.18 rows=485336 width=56)
                             Workers Planned: 2
                             ->  Parallel Append  (cost=6371.40..172279.58 rows=485336 width=56)
                                   ->  Parallel Hash Left Join  (cost=12235.24..83033.23 rows=113356 width=56)
                                         Hash Cond: ((store_sales.ss_ticket_number = store_returns.sr_ticket_number) AND (store_sales.ss_item_sk = store_returns.sr_item_sk))
                                         ->  Parallel Hash Join  (cost=3747.29..70909.38 rows=113356 width=38)
                                               Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                               ->  Parallel Hash Join  (cost=1375.47..68225.45 rows=118892 width=38)
                                                     Hash Cond: (store_sales.ss_item_sk = item.i_item_sk)
                                                     ->  Parallel Seq Scan on store_sales  (cost=0.00..63698.56 rows=1200256 width=22)
                                                     ->  Parallel Hash  (cost=1362.35..1362.35 rows=1049 width=20)
                                                           ->  Parallel Seq Scan on item  (cost=0.00..1362.35 rows=1049 width=20)
                                                                 Filter: (i_category = 'Sports'::bpchar)
                                               ->  Parallel Hash  (cost=1834.70..1834.70 rows=42970 width=8)
                                                     ->  Parallel Seq Scan on date_dim  (cost=0.00..1834.70 rows=42970 width=8)
                                         ->  Parallel Hash  (cost=5988.98..5988.98 rows=119798 width=18)
                                               ->  Parallel Seq Scan on store_returns  (cost=0.00..5988.98 rows=119798 width=18)
                                   ->  Parallel Hash Left Join  (cost=6371.40..54029.51 rows=59190 width=56)
                                         Hash Cond: ((catalog_sales.cs_order_number = catalog_returns.cr_order_number) AND (catalog_sales.cs_item_sk = catalog_returns.cr_item_sk))
                                         ->  Nested Loop  (cost=1375.77..48427.18 rows=59190 width=38)
                                               ->  Parallel Hash Join  (cost=1375.47..46363.99 rows=59498 width=38)
                                                     Hash Cond: (catalog_sales.cs_item_sk = item_1.i_item_sk)
                                                     ->  Parallel Seq Scan on catalog_sales  (cost=0.00..43411.46 rows=600646 width=22)
                                                     ->  Parallel Hash  (cost=1362.35..1362.35 rows=1049 width=20)
                                                           ->  Parallel Seq Scan on item item_1  (cost=0.00..1362.35 rows=1049 width=20)
                                                                 Filter: (i_category = 'Sports'::bpchar)
                                               ->  Memoize  (cost=0.30..0.32 rows=1 width=8)
                                                     Cache Key: catalog_sales.cs_sold_date_sk
                                                     Cache Mode: logical
                                                     ->  Index Scan using date_dim_pkey on date_dim date_dim_1  (cost=0.29..0.31 rows=1 width=8)
                                                           Index Cond: (d_date_sk = catalog_sales.cs_sold_date_sk)
                                         ->  Parallel Hash  (cost=3724.45..3724.45 rows=84745 width=18)
                                               ->  Parallel Seq Scan on catalog_returns  (cost=0.00..3724.45 rows=84745 width=18)
                                   ->  Parallel Hash Left Join  (cost=3758.11..27936.81 rows=29678 width=56)
                                         Hash Cond: ((web_sales.ws_order_number = web_returns.wr_order_number) AND (web_sales.ws_item_sk = web_returns.wr_item_sk))
                                         ->  Nested Loop  (cost=1375.77..25250.26 rows=29678 width=38)
                                               ->  Parallel Hash Join  (cost=1375.47..23926.91 rows=29691 width=38)
                                                     Hash Cond: (web_sales.ws_item_sk = item_2.i_item_sk)
                                                     ->  Parallel Seq Scan on web_sales  (cost=0.00..21764.43 rows=299743 width=22)
                                                     ->  Parallel Hash  (cost=1362.35..1362.35 rows=1049 width=20)
                                                           ->  Parallel Seq Scan on item item_2  (cost=0.00..1362.35 rows=1049 width=20)
                                                                 Filter: (i_category = 'Sports'::bpchar)
                                               ->  Memoize  (cost=0.30..0.33 rows=1 width=8)
                                                     Cache Key: web_sales.ws_sold_date_sk
                                                     Cache Mode: logical
                                                     ->  Index Scan using date_dim_pkey on date_dim date_dim_2  (cost=0.29..0.32 rows=1 width=8)
                                                           Index Cond: (d_date_sk = web_sales.ws_sold_date_sk)
                                         ->  Parallel Hash  (cost=1749.14..1749.14 rows=42214 width=18)
                                               ->  Parallel Seq Scan on web_returns  (cost=0.00..1749.14 rows=42214 width=18)
   ->  Sort  (cost=2220.52..2220.53 rows=1 width=80)
         Sort Key: ((curr_yr.sales_cnt - prev_yr.sales_cnt)), ((curr_yr.sales_amt - prev_yr.sales_amt))
         ->  Hash Join  (cost=1096.87..2220.51 rows=1 width=80)
               Hash Cond: ((curr_yr.i_brand_id = prev_yr.i_brand_id) AND (curr_yr.i_class_id = prev_yr.i_class_id) AND (curr_yr.i_category_id = prev_yr.i_category_id) AND (curr_yr.i_manufact_id = prev_yr.i_manufact_id))
               Join Filter: (((curr_yr.sales_cnt)::numeric(17,2) / (prev_yr.sales_cnt)::numeric(17,2)) < 0.9)
               ->  CTE Scan on all_sales curr_yr  (cost=0.00..1092.01 rows=243 width=60)
                     Filter: (d_year = 2002)
               ->  Hash  (cost=1092.01..1092.01 rows=243 width=60)
                     ->  CTE Scan on all_sales prev_yr  (cost=0.00..1092.01 rows=243 width=60)
                           Filter: (d_year = 2001)
 JIT:
   Functions: 129
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(69 rows)

