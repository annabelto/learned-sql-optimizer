                                                                                                                                                                               QUERY PLAN                                                                                                                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2336999.36..2336999.36 rows=1 width=334)
   CTE year_total
     ->  Append  (cost=429794.74..1585937.22 rows=4768315 width=255)
           ->  Finalize GroupAggregate  (cost=429794.74..821409.95 rows=2622791 width=255)
                 Group Key: customer.c_customer_id, customer.c_first_name, customer.c_last_name, customer.c_preferred_cust_flag, customer.c_birth_country, customer.c_login, customer.c_email_address, date_dim.d_year
                 ->  Gather Merge  (cost=429794.74..733983.56 rows=2185660 width=223)
                       Workers Planned: 2
                       ->  Partial GroupAggregate  (cost=428794.72..480704.14 rows=1092830 width=223)
                             Group Key: customer.c_customer_id, customer.c_first_name, customer.c_last_name, customer.c_preferred_cust_flag, customer.c_birth_country, customer.c_login, customer.c_email_address, date_dim.d_year
                             ->  Sort  (cost=428794.72..431526.79 rows=1092830 width=213)
                                   Sort Key: customer.c_customer_id, customer.c_first_name, customer.c_last_name, customer.c_preferred_cust_flag, customer.c_birth_country, customer.c_login, customer.c_email_address, date_dim.d_year
                                   ->  Parallel Hash Join  (cost=8015.36..95066.85 rows=1092830 width=213)
                                         Hash Cond: (store_sales.ss_customer_sk = customer.c_customer_sk)
                                         ->  Parallel Hash Join  (cost=2371.82..69221.24 rows=1144364 width=30)
                                               Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                               ->  Parallel Seq Scan on store_sales  (cost=0.00..63698.56 rows=1200256 width=30)
                                               ->  Parallel Hash  (cost=1834.70..1834.70 rows=42970 width=8)
                                                     ->  Parallel Seq Scan on date_dim  (cost=0.00..1834.70 rows=42970 width=8)
                                         ->  Parallel Hash  (cost=3356.24..3356.24 rows=58824 width=191)
                                               ->  Parallel Seq Scan on customer  (cost=0.00..3356.24 rows=58824 width=191)
           ->  Finalize GroupAggregate  (cost=245395.13..458425.02 rows=1426740 width=255)
                 Group Key: customer_1.c_customer_id, customer_1.c_first_name, customer_1.c_last_name, customer_1.c_preferred_cust_flag, customer_1.c_birth_country, customer_1.c_login, customer_1.c_email_address, date_dim_1.d_year
                 ->  Gather Merge  (cost=245395.13..410867.02 rows=1188950 width=223)
                       Workers Planned: 2
                       ->  Partial GroupAggregate  (cost=244395.11..272632.67 rows=594475 width=223)
                             Group Key: customer_1.c_customer_id, customer_1.c_first_name, customer_1.c_last_name, customer_1.c_preferred_cust_flag, customer_1.c_birth_country, customer_1.c_login, customer_1.c_email_address, date_dim_1.d_year
                             ->  Sort  (cost=244395.11..245881.29 rows=594475 width=216)
                                   Sort Key: customer_1.c_customer_id, customer_1.c_first_name, customer_1.c_last_name, customer_1.c_preferred_cust_flag, customer_1.c_birth_country, customer_1.c_login, customer_1.c_email_address, date_dim_1.d_year
                                   ->  Parallel Hash Join  (cost=8015.36..65462.22 rows=594475 width=216)
                                         Hash Cond: (catalog_sales.cs_bill_customer_sk = customer_1.c_customer_sk)
                                         ->  Parallel Hash Join  (cost=2371.82..47360.07 rows=597542 width=33)
                                               Hash Cond: (catalog_sales.cs_sold_date_sk = date_dim_1.d_date_sk)
                                               ->  Parallel Seq Scan on catalog_sales  (cost=0.00..43411.46 rows=600646 width=33)
                                               ->  Parallel Hash  (cost=1834.70..1834.70 rows=42970 width=8)
                                                     ->  Parallel Seq Scan on date_dim date_dim_1  (cost=0.00..1834.70 rows=42970 width=8)
                                         ->  Parallel Hash  (cost=3356.24..3356.24 rows=58824 width=191)
                                               ->  Parallel Seq Scan on customer customer_1  (cost=0.00..3356.24 rows=58824 width=191)
           ->  Finalize GroupAggregate  (cost=127254.31..234577.52 rows=718784 width=255)
                 Group Key: customer_2.c_customer_id, customer_2.c_first_name, customer_2.c_last_name, customer_2.c_preferred_cust_flag, customer_2.c_birth_country, customer_2.c_login, customer_2.c_email_address, date_dim_2.d_year
                 ->  Gather Merge  (cost=127254.31..210618.07 rows=598986 width=223)
                       Workers Planned: 2
                       ->  Partial GroupAggregate  (cost=126254.28..140480.20 rows=299493 width=223)
                             Group Key: customer_2.c_customer_id, customer_2.c_first_name, customer_2.c_last_name, customer_2.c_preferred_cust_flag, customer_2.c_birth_country, customer_2.c_login, customer_2.c_email_address, date_dim_2.d_year
                             ->  Sort  (cost=126254.28..127003.01 rows=299493 width=216)
                                   Sort Key: customer_2.c_customer_id, customer_2.c_first_name, customer_2.c_last_name, customer_2.c_preferred_cust_flag, customer_2.c_birth_country, customer_2.c_login, customer_2.c_email_address, date_dim_2.d_year
                                   ->  Parallel Hash Join  (cost=8015.36..37587.15 rows=299493 width=216)
                                         Hash Cond: (web_sales.ws_bill_customer_sk = customer_2.c_customer_sk)
                                         ->  Parallel Hash Join  (cost=2371.82..24923.13 rows=299603 width=33)
                                               Hash Cond: (web_sales.ws_sold_date_sk = date_dim_2.d_date_sk)
                                               ->  Parallel Seq Scan on web_sales  (cost=0.00..21764.43 rows=299743 width=33)
                                               ->  Parallel Hash  (cost=1834.70..1834.70 rows=42970 width=8)
                                                     ->  Parallel Seq Scan on date_dim date_dim_2  (cost=0.00..1834.70 rows=42970 width=8)
                                         ->  Parallel Hash  (cost=3356.24..3356.24 rows=58824 width=191)
                                               ->  Parallel Seq Scan on customer customer_2  (cost=0.00..3356.24 rows=58824 width=191)
   ->  Sort  (cost=751062.14..751062.14 rows=1 width=334)
         Sort Key: t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name, t_s_secyear.customer_birth_country
         ->  Nested Loop  (cost=0.00..751062.13 rows=1 width=334)
               Join Filter: ((t_s_secyear.customer_id = t_w_secyear.customer_id) AND (CASE WHEN (t_c_firstyear.year_total > '0'::numeric) THEN (t_c_secyear.year_total / t_c_firstyear.year_total) ELSE NULL::numeric END > CASE WHEN (t_w_firstyear.year_total > '0'::numeric) THEN (t_w_secyear.year_total / t_w_firstyear.year_total) ELSE NULL::numeric END))
               ->  Nested Loop  (cost=0.00..631851.28 rows=1 width=702)
                     Join Filter: ((t_s_secyear.customer_id = t_c_secyear.customer_id) AND (CASE WHEN (t_c_firstyear.year_total > '0'::numeric) THEN (t_c_secyear.year_total / t_c_firstyear.year_total) ELSE NULL::numeric END > CASE WHEN (t_s_firstyear.year_total > '0'::numeric) THEN (t_s_secyear.year_total / t_s_firstyear.year_total) ELSE NULL::numeric END))
                     ->  Nested Loop  (cost=0.00..512640.43 rows=1 width=666)
                           Join Filter: (t_s_firstyear.customer_id = t_s_secyear.customer_id)
                           ->  Nested Loop  (cost=0.00..393428.39 rows=2 width=300)
                                 Join Filter: (t_s_firstyear.customer_id = t_w_firstyear.customer_id)
                                 ->  Nested Loop  (cost=0.00..262292.92 rows=8 width=200)
                                       Join Filter: (t_s_firstyear.customer_id = t_c_firstyear.customer_id)
                                       ->  CTE Scan on year_total t_s_firstyear  (cost=0.00..131128.66 rows=40 width=100)
                                             Filter: ((year_total > '0'::numeric) AND (sale_type = 's'::text) AND (dyear = 1999))
                                       ->  CTE Scan on year_total t_c_firstyear  (cost=0.00..131128.66 rows=40 width=100)
                                             Filter: ((year_total > '0'::numeric) AND (sale_type = 'c'::text) AND (dyear = 1999))
                                 ->  CTE Scan on year_total t_w_firstyear  (cost=0.00..131128.66 rows=40 width=100)
                                       Filter: ((year_total > '0'::numeric) AND (sale_type = 'w'::text) AND (dyear = 1999))
                           ->  CTE Scan on year_total t_s_secyear  (cost=0.00..119207.88 rows=119 width=366)
                                 Filter: ((sale_type = 's'::text) AND (dyear = 2000))
                     ->  CTE Scan on year_total t_c_secyear  (cost=0.00..119207.88 rows=119 width=100)
                           Filter: ((sale_type = 'c'::text) AND (dyear = 2000))
               ->  CTE Scan on year_total t_w_secyear  (cost=0.00..119207.88 rows=119 width=100)
                     Filter: ((sale_type = 'w'::text) AND (dyear = 2000))
 JIT:
   Functions: 115
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(81 rows)

