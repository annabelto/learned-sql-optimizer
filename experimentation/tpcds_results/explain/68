                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=73980.57..73980.82 rows=100 width=170)
   ->  Sort  (cost=73980.57..73981.97 rows=562 width=170)
         Sort Key: customer.c_last_name, store_sales.ss_ticket_number
         ->  Nested Loop  (cost=70335.07..73959.09 rows=562 width=170)
               Join Filter: ((current_addr.ca_city)::text <> (customer_address.ca_city)::text)
               ->  Nested Loop  (cost=70334.78..73751.32 rows=563 width=165)
                     ->  Finalize GroupAggregate  (cost=70334.49..70419.16 rows=563 width=117)
                           Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, customer_address.ca_city
                           ->  Gather Merge  (cost=70334.49..70397.55 rows=470 width=117)
                                 Workers Planned: 2
                                 ->  Partial GroupAggregate  (cost=69334.47..69343.28 rows=235 width=117)
                                       Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, customer_address.ca_city
                                       ->  Sort  (cost=69334.47..69335.06 rows=235 width=40)
                                             Sort Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, customer_address.ca_city
                                             ->  Nested Loop  (cost=2396.29..69325.21 rows=235 width=40)
                                                   ->  Hash Join  (cost=2396.00..69249.15 rows=246 width=31)
                                                         Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                         ->  Hash Join  (cost=2394.70..69246.95 rows=258 width=35)
                                                               Hash Cond: (store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk)
                                                               ->  Parallel Hash Join  (cost=2211.20..69060.61 rows=1081 width=39)
                                                                     Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                     ->  Parallel Seq Scan on store_sales  (cost=0.00..63698.56 rows=1200256 width=43)
                                                                     ->  Parallel Hash  (cost=2210.69..2210.69 rows=41 width=4)
                                                                           ->  Parallel Seq Scan on date_dim  (cost=0.00..2210.69 rows=41 width=4)
                                                                                 Filter: ((d_dom >= 1) AND (d_dom <= 2) AND (d_year = ANY ('{1998,1999,2000}'::integer[])))
                                                               ->  Hash  (cost=161.00..161.00 rows=1800 width=4)
                                                                     ->  Seq Scan on household_demographics  (cost=0.00..161.00 rows=1800 width=4)
                                                                           Filter: ((hd_dep_count = 3) OR (hd_vehicle_count = 4))
                                                         ->  Hash  (cost=1.15..1.15 rows=12 width=4)
                                                               ->  Seq Scan on store  (cost=0.00..1.15 rows=12 width=4)
                                                                     Filter: ((s_city)::text = ANY ('{Fairview,Midway}'::text[]))
                                                   ->  Index Scan using customer_address_pkey on customer_address  (cost=0.29..0.31 rows=1 width=13)
                                                         Index Cond: (ca_address_sk = store_sales.ss_addr_sk)
                     ->  Index Scan using customer_pkey on customer  (cost=0.29..5.91 rows=1 width=60)
                           Index Cond: (c_customer_sk = store_sales.ss_customer_sk)
               ->  Index Scan using customer_address_pkey on customer_address current_addr  (cost=0.29..0.36 rows=1 width=13)
                     Index Cond: (ca_address_sk = customer.c_current_addr_sk)
(37 rows)

