                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=56336.03..56336.04 rows=2 width=148)
   ->  Sort  (cost=56336.03..56336.04 rows=2 width=148)
         Sort Key: (count(*)) DESC, item.i_item_desc, warehouse.w_warehouse_name, d1.d_week_seq
         ->  GroupAggregate  (cost=56334.05..56336.02 rows=2 width=148)
               Group Key: item.i_item_desc, warehouse.w_warehouse_name, d1.d_week_seq
               ->  Nested Loop  (cost=56334.05..56335.97 rows=2 width=128)
                     Join Filter: (d3.d_date > (d1.d_date + 5))
                     ->  Gather Merge  (cost=56333.75..56334.32 rows=5 width=136)
                           Workers Planned: 1
                           ->  Sort  (cost=55333.74..55333.75 rows=3 width=136)
                                 Sort Key: item.i_item_desc, warehouse.w_warehouse_name, d1.d_week_seq
                                 ->  Nested Loop Left Join  (cost=47359.32..55333.72 rows=3 width=136)
                                       ->  Nested Loop  (cost=47359.17..55333.22 rows=3 width=136)
                                             ->  Nested Loop  (cost=47358.88..55332.30 rows=3 width=42)
                                                   ->  Nested Loop  (cost=47358.75..55331.86 rows=3 width=28)
                                                         ->  Parallel Hash Join  (cost=47358.32..49411.99 rows=988 width=28)
                                                               Hash Cond: (d2.d_week_seq = d1.d_week_seq)
                                                               ->  Parallel Seq Scan on date_dim d2  (cost=0.00..1834.70 rows=42970 width=8)
                                                               ->  Parallel Hash  (cost=47357.07..47357.07 rows=100 width=24)
                                                                     ->  Nested Loop  (cost=2103.23..47357.07 rows=100 width=24)
                                                                           ->  Hash Join  (cost=2102.80..47098.86 rows=494 width=28)
                                                                                 Hash Cond: (catalog_sales.cs_bill_hdemo_sk = household_demographics.hd_demo_sk)
                                                                                 ->  Parallel Hash Join  (cost=1944.80..46933.04 rows=2978 width=32)
                                                                                       Hash Cond: (catalog_sales.cs_sold_date_sk = d1.d_date_sk)
                                                                                       ->  Parallel Seq Scan on catalog_sales  (cost=0.00..43411.46 rows=600646 width=32)
                                                                                       ->  Parallel Hash  (cost=1942.12..1942.12 rows=214 width=12)
                                                                                             ->  Parallel Seq Scan on date_dim d1  (cost=0.00..1942.12 rows=214 width=12)
                                                                                                   Filter: (d_year = 1998)
                                                                                 ->  Hash  (cost=143.00..143.00 rows=1200 width=4)
                                                                                       ->  Seq Scan on household_demographics  (cost=0.00..143.00 rows=1200 width=4)
                                                                                             Filter: (hd_buy_potential = '1001-5000'::bpchar)
                                                                           ->  Index Scan using customer_demographics_pkey on customer_demographics  (cost=0.43..0.52 rows=1 width=4)
                                                                                 Index Cond: (cd_demo_sk = catalog_sales.cs_bill_cdemo_sk)
                                                                                 Filter: (cd_marital_status = 'S'::bpchar)
                                                         ->  Index Scan using inventory_pkey on inventory  (cost=0.43..5.98 rows=1 width=16)
                                                               Index Cond: ((inv_date_sk = d2.d_date_sk) AND (inv_item_sk = catalog_sales.cs_item_sk))
                                                               Filter: (inv_quantity_on_hand < catalog_sales.cs_quantity)
                                                   ->  Index Scan using warehouse_pkey on warehouse  (cost=0.13..0.15 rows=1 width=22)
                                                         Index Cond: (w_warehouse_sk = inventory.inv_warehouse_sk)
                                             ->  Index Scan using item_pkey on item  (cost=0.29..0.31 rows=1 width=106)
                                                   Index Cond: (i_item_sk = catalog_sales.cs_item_sk)
                                       ->  Index Only Scan using promotion_pkey on promotion  (cost=0.15..0.17 rows=1 width=4)
                                             Index Cond: (p_promo_sk = catalog_sales.cs_promo_sk)
                     ->  Index Scan using date_dim_pkey on date_dim d3  (cost=0.29..0.31 rows=1 width=8)
                           Index Cond: (d_date_sk = catalog_sales.cs_ship_date_sk)
(45 rows)

