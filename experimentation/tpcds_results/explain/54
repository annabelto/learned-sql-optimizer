                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93900.77..93900.78 rows=1 width=16)
   ->  Sort  (cost=93900.77..93900.78 rows=1 width=16)
         Sort Key: (((my_revenue.revenue / '50'::numeric))::integer), (count(*))
         ->  GroupAggregate  (cost=93900.73..93900.76 rows=1 width=16)
               Group Key: (((my_revenue.revenue / '50'::numeric))::integer)
               ->  Sort  (cost=93900.73..93900.74 rows=1 width=36)
                     Sort Key: (((my_revenue.revenue / '50'::numeric))::integer)
                     ->  Subquery Scan on my_revenue  (cost=25489.51..93900.72 rows=1 width=36)
                           ->  GroupAggregate  (cost=25489.51..93900.71 rows=1 width=36)
                                 Group Key: customer.c_customer_sk
                                 InitPlan 1 (returns $0)
                                   ->  Unique  (cost=2501.55..2501.70 rows=30 width=4)
                                         ->  Sort  (cost=2501.55..2501.62 rows=30 width=4)
                                               Sort Key: ((date_dim_2.d_month_seq + 1))
                                               ->  Seq Scan on date_dim date_dim_2  (cost=0.00..2500.81 rows=30 width=4)
                                                     Filter: ((d_year = 1999) AND (d_moy = 1))
                                 InitPlan 2 (returns $1)
                                   ->  Unique  (cost=2501.55..2501.70 rows=30 width=4)
                                         ->  Sort  (cost=2501.55..2501.62 rows=30 width=4)
                                               Sort Key: ((date_dim_3.d_month_seq + 3))
                                               ->  Seq Scan on date_dim date_dim_3  (cost=0.00..2500.81 rows=30 width=4)
                                                     Filter: ((d_year = 1999) AND (d_moy = 1))
                                 ->  Nested Loop  (cost=20486.12..88897.30 rows=1 width=10)
                                       Join Filter: (store_sales.ss_customer_sk = customer.c_customer_sk)
                                       ->  Nested Loop  (cost=17433.88..17451.81 rows=1 width=4)
                                             Join Filter: (((customer_address.ca_county)::text = (store.s_county)::text) AND (customer_address.ca_state = store.s_state))
                                             ->  Nested Loop  (cost=17433.88..17450.24 rows=2 width=21)
                                                   ->  Unique  (cost=17433.59..17433.60 rows=2 width=8)
                                                         ->  Sort  (cost=17433.59..17433.59 rows=2 width=8)
                                                               Sort Key: customer.c_customer_sk, customer.c_current_addr_sk
                                                               ->  Gather  (cost=1005.69..17433.58 rows=2 width=8)
                                                                     Workers Planned: 1
                                                                     ->  Nested Loop  (cost=5.69..16433.38 rows=1 width=8)
                                                                           ->  Nested Loop  (cost=5.40..16433.06 rows=1 width=4)
                                                                                 ->  Nested Loop  (cost=5.11..15377.70 rows=3319 width=8)
                                                                                       ->  Parallel Seq Scan on item  (cost=0.00..1388.82 rows=28 width=4)
                                                                                             Filter: ((i_category = 'Music'::bpchar) AND (i_class = 'country'::bpchar))
                                                                                       ->  Append  (cost=5.11..498.28 rows=132 width=12)
                                                                                             ->  Bitmap Heap Scan on catalog_sales  (cost=5.11..330.27 rows=88 width=12)
                                                                                                   Recheck Cond: (cs_item_sk = item.i_item_sk)
                                                                                                   ->  Bitmap Index Scan on catalog_sales_pkey  (cost=0.00..5.09 rows=88 width=0)
                                                                                                         Index Cond: (cs_item_sk = item.i_item_sk)
                                                                                             ->  Bitmap Heap Scan on web_sales  (cost=4.77..167.36 rows=44 width=12)
                                                                                                   Recheck Cond: (ws_item_sk = item.i_item_sk)
                                                                                                   ->  Bitmap Index Scan on web_sales_pkey  (cost=0.00..4.75 rows=44 width=0)
                                                                                                         Index Cond: (ws_item_sk = item.i_item_sk)
                                                                                 ->  Index Scan using date_dim_pkey on date_dim date_dim_1  (cost=0.29..0.32 rows=1 width=4)
                                                                                       Index Cond: (d_date_sk = catalog_sales.cs_sold_date_sk)
                                                                                       Filter: ((d_moy = 1) AND (d_year = 1999))
                                                                           ->  Index Scan using customer_pkey on customer  (cost=0.29..0.32 rows=1 width=8)
                                                                                 Index Cond: (c_customer_sk = catalog_sales.cs_bill_customer_sk)
                                                   ->  Index Scan using customer_address_pkey on customer_address  (cost=0.29..8.31 rows=1 width=21)
                                                         Index Cond: (ca_address_sk = customer.c_current_addr_sk)
                                             ->  Materialize  (cost=0.00..1.18 rows=12 width=21)
                                                   ->  Seq Scan on store  (cost=0.00..1.12 rows=12 width=21)
                                       ->  Gather  (cost=3052.24..71273.95 rows=13723 width=10)
                                             Workers Planned: 2
                                             Params Evaluated: $0, $1
                                             ->  Parallel Hash Join  (cost=2052.24..68901.65 rows=5718 width=10)
                                                   Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                   ->  Parallel Seq Scan on store_sales  (cost=0.00..63698.56 rows=1200256 width=14)
                                                   ->  Parallel Hash  (cost=2049.55..2049.55 rows=215 width=4)
                                                         ->  Parallel Seq Scan on date_dim  (cost=0.00..2049.55 rows=215 width=4)
                                                               Filter: ((d_month_seq >= $0) AND (d_month_seq <= $1))
(64 rows)

