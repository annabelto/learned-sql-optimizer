                                                                                                                                                                          QUERY PLAN                                                                                                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=52977.09..52977.09 rows=1 width=1310)
   Sort Key: cs1.product_name, cs1.store_name, cs2.cnt, cs1.s1, cs2.s1
   CTE cross_sales
     ->  GroupAggregate  (cost=52976.94..52977.01 rows=1 width=267)
           Group Key: item.i_item_sk, store.s_store_name, store.s_zip, ad1.ca_street_number, ad1.ca_street_name, ad1.ca_city, ad1.ca_zip, ad2.ca_street_number, ad2.ca_street_name, ad2.ca_city, ad2.ca_zip, d1.d_year, d2.d_year, d3.d_year
           ->  Sort  (cost=52976.94..52976.95 rows=1 width=178)
                 Sort Key: item.i_item_sk, store.s_store_name, store.s_zip, ad1.ca_street_number, ad1.ca_street_name, ad1.ca_city, ad1.ca_zip, ad2.ca_street_number, ad2.ca_street_name, ad2.ca_city, ad2.ca_zip, d1.d_year, d2.d_year, d3.d_year
                 ->  Nested Loop  (cost=52566.60..52976.93 rows=1 width=178)
                       ->  Nested Loop  (cost=52566.47..52976.77 rows=1 width=182)
                             ->  Nested Loop  (cost=52566.18..52976.42 rows=1 width=146)
                                   Join Filter: (cd1.cd_marital_status <> cd2.cd_marital_status)
                                   ->  Nested Loop  (cost=52565.75..52974.88 rows=1 width=152)
                                         ->  Nested Loop  (cost=52565.46..52974.50 rows=1 width=152)
                                               ->  Nested Loop  (cost=52565.32..52974.34 rows=1 width=156)
                                                     ->  Nested Loop  (cost=52565.04..52974.04 rows=1 width=156)
                                                           ->  Nested Loop  (cost=52564.90..52973.89 rows=1 width=144)
                                                                 ->  Nested Loop  (cost=52564.61..52973.51 rows=1 width=144)
                                                                       ->  Nested Loop  (cost=52564.32..52973.20 rows=1 width=108)
                                                                             ->  Nested Loop  (cost=52564.03..52972.89 rows=1 width=108)
                                                                                   ->  Nested Loop  (cost=52563.60..52972.41 rows=1 width=110)
                                                                                         ->  Nested Loop  (cost=52563.32..52972.11 rows=1 width=110)
                                                                                               ->  Nested Loop  (cost=52563.17..52971.94 rows=1 width=114)
                                                                                                     ->  Nested Loop  (cost=52562.88..52971.63 rows=1 width=98)
                                                                                                           Join Filter: (item.i_item_sk = store_sales.ss_item_sk)
                                                                                                           ->  Nested Loop  (cost=52562.45..52970.29 rows=1 width=67)
                                                                                                                 ->  Nested Loop  (cost=52562.16..52754.17 rows=635 width=12)
                                                                                                                       ->  Finalize GroupAggregate  (cost=52561.74..52576.78 rows=36 width=68)
                                                                                                                             Group Key: catalog_sales.cs_item_sk
                                                                                                                             Filter: (sum(catalog_sales.cs_ext_list_price) > ('2'::numeric * sum(((catalog_returns.cr_refunded_cash + catalog_returns.cr_reversed_charge) + catalog_returns.cr_store_credit))))
                                                                                                                             ->  Gather Merge  (cost=52561.74..52573.48 rows=90 width=68)
                                                                                                                                   Workers Planned: 2
                                                                                                                                   ->  Partial GroupAggregate  (cost=51561.71..51563.06 rows=45 width=68)
                                                                                                                                         Group Key: catalog_sales.cs_item_sk
                                                                                                                                         ->  Sort  (cost=51561.71..51561.83 rows=45 width=29)
                                                                                                                                               Sort Key: catalog_sales.cs_item_sk
                                                                                                                                               ->  Parallel Hash Join  (cost=4995.63..51560.48 rows=45 width=29)
                                                                                                                                                     Hash Cond: ((catalog_sales.cs_item_sk = catalog_returns.cr_item_sk) AND (catalog_sales.cs_order_number = catalog_returns.cr_order_number))
                                                                                                                                                     ->  Parallel Seq Scan on catalog_sales  (cost=0.00..43411.46 rows=600646 width=15)
                                                                                                                                                     ->  Parallel Hash  (cost=3724.45..3724.45 rows=84745 width=26)
                                                                                                                                                           ->  Parallel Seq Scan on catalog_returns  (cost=0.00..3724.45 rows=84745 width=26)
                                                                                                                       ->  Index Only Scan using store_returns_pkey on store_returns  (cost=0.42..4.74 rows=18 width=8)
                                                                                                                             Index Cond: (sr_item_sk = catalog_sales.cs_item_sk)
                                                                                                                 ->  Index Scan using item_pkey on item  (cost=0.29..0.34 rows=1 width=55)
                                                                                                                       Index Cond: (i_item_sk = store_returns.sr_item_sk)
                                                                                                                       Filter: ((i_current_price >= '48'::numeric) AND (i_current_price <= '58'::numeric) AND (i_current_price >= '49'::numeric) AND (i_current_price <= '63'::numeric) AND (i_color = ANY ('{orange,lace,lawn,misty,blush,pink}'::bpchar[])))
                                                                                                           ->  Index Scan using store_sales_pkey on store_sales  (cost=0.43..1.32 rows=1 width=51)
                                                                                                                 Index Cond: ((ss_item_sk = store_returns.sr_item_sk) AND (ss_ticket_number = store_returns.sr_ticket_number))
                                                                                                     ->  Index Scan using customer_pkey on customer  (cost=0.29..0.31 rows=1 width=24)
                                                                                                           Index Cond: (c_customer_sk = store_sales.ss_customer_sk)
                                                                                               ->  Index Only Scan using promotion_pkey on promotion  (cost=0.15..0.17 rows=1 width=4)
                                                                                                     Index Cond: (p_promo_sk = store_sales.ss_promo_sk)
                                                                                         ->  Index Scan using household_demographics_pkey on household_demographics hd1  (cost=0.28..0.30 rows=1 width=8)
                                                                                               Index Cond: (hd_demo_sk = store_sales.ss_hdemo_sk)
                                                                                   ->  Index Scan using customer_demographics_pkey on customer_demographics cd1  (cost=0.43..0.48 rows=1 width=6)
                                                                                         Index Cond: (cd_demo_sk = store_sales.ss_cdemo_sk)
                                                                             ->  Index Scan using date_dim_pkey on date_dim d1  (cost=0.29..0.31 rows=1 width=8)
                                                                                   Index Cond: (d_date_sk = store_sales.ss_sold_date_sk)
                                                                       ->  Index Scan using customer_address_pkey on customer_address ad1  (cost=0.29..0.31 rows=1 width=44)
                                                                             Index Cond: (ca_address_sk = store_sales.ss_addr_sk)
                                                                 ->  Index Scan using date_dim_pkey on date_dim d2  (cost=0.29..0.37 rows=1 width=8)
                                                                       Index Cond: (d_date_sk = customer.c_first_sales_date_sk)
                                                           ->  Index Scan using store_pkey on store  (cost=0.14..0.15 rows=1 width=20)
                                                                 Index Cond: (s_store_sk = store_sales.ss_store_sk)
                                                     ->  Index Scan using household_demographics_pkey on household_demographics hd2  (cost=0.28..0.30 rows=1 width=8)
                                                           Index Cond: (hd_demo_sk = customer.c_current_hdemo_sk)
                                               ->  Index Only Scan using income_band_pkey on income_band ib2  (cost=0.14..0.16 rows=1 width=4)
                                                     Index Cond: (ib_income_band_sk = hd2.hd_income_band_sk)
                                         ->  Index Scan using date_dim_pkey on date_dim d3  (cost=0.29..0.37 rows=1 width=8)
                                               Index Cond: (d_date_sk = customer.c_first_shipto_date_sk)
                                   ->  Index Scan using customer_demographics_pkey on customer_demographics cd2  (cost=0.43..1.53 rows=1 width=6)
                                         Index Cond: (cd_demo_sk = customer.c_current_cdemo_sk)
                             ->  Index Scan using customer_address_pkey on customer_address ad2  (cost=0.29..0.36 rows=1 width=44)
                                   Index Cond: (ca_address_sk = customer.c_current_addr_sk)
                       ->  Index Only Scan using income_band_pkey on income_band ib1  (cost=0.14..0.16 rows=1 width=4)
                             Index Cond: (ib_income_band_sk = hd1.hd_income_band_sk)
   ->  Nested Loop  (cost=0.00..0.07 rows=1 width=1310)
         Join Filter: ((cs2.cnt <= cs1.cnt) AND (cs1.item_sk = cs2.item_sk) AND ((cs1.store_name)::text = (cs2.store_name)::text) AND (cs1.store_zip = cs2.store_zip))
         ->  CTE Scan on cross_sales cs1  (cost=0.00..0.02 rows=1 width=1206)
               Filter: (syear = 1999)
         ->  CTE Scan on cross_sales cs2  (cost=0.00..0.02 rows=1 width=274)
               Filter: (syear = 2000)
(81 rows)

