                                                                                         QUERY PLAN                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=77780.80..77781.05 rows=100 width=138)
   ->  Sort  (cost=77780.80..77787.14 rows=2536 width=138)
         Sort Key: customer.c_last_name, customer.c_first_name, current_addr.ca_city, dn.bought_city, dn.ss_ticket_number
         ->  Nested Loop  (cost=71081.12..77683.87 rows=2536 width=138)
               Join Filter: ((current_addr.ca_city)::text <> (dn.bought_city)::text)
               ->  Merge Join  (cost=71080.83..76746.51 rows=2540 width=133)
                     Merge Cond: (customer.c_customer_sk = dn.ss_customer_sk)
                     ->  Index Scan using customer_pkey on customer  (cost=0.29..5377.87 rows=100000 width=60)
                     ->  Sort  (cost=71080.54..71086.89 rows=2540 width=81)
                           Sort Key: dn.ss_customer_sk
                           ->  Subquery Scan on dn  (cost=70552.45..70936.89 rows=2540 width=81)
                                 ->  Finalize GroupAggregate  (cost=70552.45..70911.49 rows=2540 width=85)
                                       Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, customer_address.ca_city
                                       ->  Gather Merge  (cost=70552.45..70831.07 rows=2116 width=85)
                                             Workers Planned: 2
                                             ->  Partial GroupAggregate  (cost=69552.43..69586.81 rows=1058 width=85)
                                                   Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, customer_address.ca_city
                                                   ->  Sort  (cost=69552.43..69555.07 rows=1058 width=30)
                                                         Sort Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, customer_address.ca_city
                                                         ->  Nested Loop  (cost=2290.68..69499.28 rows=1058 width=30)
                                                               ->  Hash Join  (cost=2290.39..69156.68 rows=1108 width=21)
                                                                     Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                                     ->  Hash Join  (cost=2289.05..69151.26 rows=1162 width=25)
                                                                           Hash Cond: (store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk)
                                                                           ->  Parallel Hash Join  (cost=2105.55..68954.96 rows=4872 width=29)
                                                                                 Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                                 ->  Parallel Seq Scan on store_sales  (cost=0.00..63698.56 rows=1200256 width=33)
                                                                                 ->  Parallel Hash  (cost=2103.26..2103.26 rows=183 width=4)
                                                                                       ->  Parallel Seq Scan on date_dim  (cost=0.00..2103.26 rows=183 width=4)
                                                                                             Filter: ((d_dow = ANY ('{6,0}'::integer[])) AND (d_year = ANY ('{2000,2001,2002}'::integer[])))
                                                                           ->  Hash  (cost=161.00..161.00 rows=1800 width=4)
                                                                                 ->  Seq Scan on household_demographics  (cost=0.00..161.00 rows=1800 width=4)
                                                                                       Filter: ((hd_dep_count = 8) OR (hd_vehicle_count = 0))
                                                                     ->  Hash  (cost=1.20..1.20 rows=12 width=4)
                                                                           ->  Seq Scan on store  (cost=0.00..1.20 rows=12 width=4)
                                                                                 Filter: ((s_city)::text = ANY ('{Midway,Fairview,Fairview,Midway,Fairview}'::text[]))
                                                               ->  Index Scan using customer_address_pkey on customer_address  (cost=0.29..0.31 rows=1 width=13)
                                                                     Index Cond: (ca_address_sk = store_sales.ss_addr_sk)
               ->  Index Scan using customer_address_pkey on customer_address current_addr  (cost=0.29..0.36 rows=1 width=13)
                     Index Cond: (ca_address_sk = customer.c_current_addr_sk)
(40 rows)

