                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=139831.03..139831.03 rows=1 width=96)
   ->  Sort  (cost=139831.03..139831.03 rows=1 width=96)
         Sort Key: (sum(store_sales.ss_ext_sales_price)), (sum(store_sales_1.ss_ext_sales_price))
         ->  Nested Loop  (cost=139830.96..139831.02 rows=1 width=96)
               ->  Aggregate  (cost=69915.15..69915.16 rows=1 width=32)
                     ->  Gather  (cost=3051.95..69915.15 rows=1 width=6)
                           Workers Planned: 2
                           ->  Nested Loop  (cost=2051.95..68915.05 rows=1 width=6)
                                 ->  Nested Loop  (cost=2051.66..68914.33 rows=2 width=10)
                                       ->  Nested Loop  (cost=2051.37..68913.70 rows=2 width=10)
                                             ->  Nested Loop  (cost=2051.22..68913.01 rows=4 width=14)
                                                   ->  Hash Join  (cost=2050.94..68900.95 rows=39 width=18)
                                                         Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                         ->  Parallel Hash Join  (cost=2049.78..68898.08 rows=485 width=22)
                                                               Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                               ->  Parallel Seq Scan on store_sales  (cost=0.00..63697.68 rows=1200168 width=26)
                                                               ->  Parallel Hash  (cost=2049.55..2049.55 rows=18 width=4)
                                                                     ->  Parallel Seq Scan on date_dim  (cost=0.00..2049.55 rows=18 width=4)
                                                                           Filter: ((d_year = 2000) AND (d_moy = 12))
                                                         ->  Hash  (cost=1.15..1.15 rows=1 width=4)
                                                               ->  Seq Scan on store  (cost=0.00..1.15 rows=1 width=4)
                                                                     Filter: (s_gmt_offset = '-7'::numeric)
                                                   ->  Index Scan using item_pkey on item  (cost=0.29..0.31 rows=1 width=4)
                                                         Index Cond: (i_item_sk = store_sales.ss_item_sk)
                                                         Filter: (i_category = 'Home'::bpchar)
                                             ->  Index Scan using promotion_pkey on promotion  (cost=0.15..0.17 rows=1 width=4)
                                                   Index Cond: (p_promo_sk = store_sales.ss_promo_sk)
                                                   Filter: ((p_channel_dmail = 'Y'::bpchar) OR (p_channel_email = 'Y'::bpchar) OR (p_channel_tv = 'Y'::bpchar))
                                       ->  Index Scan using customer_pkey on customer  (cost=0.29..0.31 rows=1 width=8)
                                             Index Cond: (c_customer_sk = store_sales.ss_customer_sk)
                                 ->  Index Scan using customer_address_pkey on customer_address  (cost=0.29..0.36 rows=1 width=4)
                                       Index Cond: (ca_address_sk = customer.c_current_addr_sk)
                                       Filter: (ca_gmt_offset = '-7'::numeric)
               ->  Aggregate  (cost=69915.81..69915.82 rows=1 width=32)
                     ->  Gather  (cost=3051.81..69915.80 rows=1 width=6)
                           Workers Planned: 2
                           ->  Nested Loop  (cost=2051.81..68915.70 rows=1 width=6)
                                 ->  Nested Loop  (cost=2051.52..68914.27 rows=4 width=10)
                                       ->  Nested Loop  (cost=2051.22..68913.01 rows=4 width=10)
                                             ->  Hash Join  (cost=2050.94..68900.95 rows=39 width=14)
                                                   Hash Cond: (store_sales_1.ss_store_sk = store_1.s_store_sk)
                                                   ->  Parallel Hash Join  (cost=2049.78..68898.08 rows=485 width=18)
                                                         Hash Cond: (store_sales_1.ss_sold_date_sk = date_dim_1.d_date_sk)
                                                         ->  Parallel Seq Scan on store_sales store_sales_1  (cost=0.00..63697.68 rows=1200168 width=22)
                                                         ->  Parallel Hash  (cost=2049.55..2049.55 rows=18 width=4)
                                                               ->  Parallel Seq Scan on date_dim date_dim_1  (cost=0.00..2049.55 rows=18 width=4)
                                                                     Filter: ((d_year = 2000) AND (d_moy = 12))
                                                   ->  Hash  (cost=1.15..1.15 rows=1 width=4)
                                                         ->  Seq Scan on store store_1  (cost=0.00..1.15 rows=1 width=4)
                                                               Filter: (s_gmt_offset = '-7'::numeric)
                                             ->  Index Scan using item_pkey on item item_1  (cost=0.29..0.31 rows=1 width=4)
                                                   Index Cond: (i_item_sk = store_sales_1.ss_item_sk)
                                                   Filter: (i_category = 'Home'::bpchar)
                                       ->  Index Scan using customer_pkey on customer customer_1  (cost=0.29..0.31 rows=1 width=8)
                                             Index Cond: (c_customer_sk = store_sales_1.ss_customer_sk)
                                 ->  Index Scan using customer_address_pkey on customer_address customer_address_1  (cost=0.29..0.36 rows=1 width=4)
                                       Index Cond: (ca_address_sk = customer_1.c_current_addr_sk)
                                       Filter: (ca_gmt_offset = '-7'::numeric)
 JIT:
   Functions: 81
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(61 rows)

 promotions | total | ?column? 
------------+-------+----------
            |       |         
(1 row)

