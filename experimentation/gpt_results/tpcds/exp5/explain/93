                                                                                                                                              QUERY PLAN                                                                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=11711.06..11711.08 rows=9 width=36)
   ->  Sort  (cost=11711.06..11711.08 rows=9 width=36)
         Sort Key: (sum(CASE WHEN (store_returns.sr_return_quantity IS NOT NULL) THEN (((store_sales.ss_quantity - store_returns.sr_return_quantity))::numeric * store_sales.ss_sales_price) ELSE ((store_sales.ss_quantity)::numeric * store_sales.ss_sales_price) END)), store_sales.ss_customer_sk
         ->  Finalize GroupAggregate  (cost=11709.69..11710.92 rows=9 width=36)
               Group Key: store_sales.ss_customer_sk
               ->  Gather Merge  (cost=11709.69..11710.74 rows=8 width=36)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=10709.67..10709.80 rows=4 width=36)
                           Group Key: store_sales.ss_customer_sk
                           ->  Sort  (cost=10709.67..10709.68 rows=4 width=18)
                                 Sort Key: store_sales.ss_customer_sk
                                 ->  Nested Loop  (cost=1.88..10709.63 rows=4 width=18)
                                       ->  Hash Join  (cost=1.45..6341.63 rows=3302 width=12)
                                             Hash Cond: (store_returns.sr_reason_sk = reason.r_reason_sk)
                                             ->  Parallel Seq Scan on store_returns  (cost=0.00..5988.98 rows=119798 width=16)
                                             ->  Hash  (cost=1.44..1.44 rows=1 width=4)
                                                   ->  Seq Scan on reason  (cost=0.00..1.44 rows=1 width=4)
                                                         Filter: (r_reason_desc = 'reason 58'::bpchar)
                                       ->  Index Scan using store_sales_pkey on store_sales  (cost=0.43..1.32 rows=1 width=22)
                                             Index Cond: ((ss_item_sk = store_returns.sr_item_sk) AND (ss_ticket_number = store_returns.sr_ticket_number))
(20 rows)

 ss_customer_sk | sumsales 
----------------+----------
(0 rows)

