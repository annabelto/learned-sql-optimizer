

 Limit  (cost=13749.26..13749.28 rows=7 width=68)
   ->  Sort  (cost=13749.26..13749.28 rows=7 width=68)
         Sort Key: tmp1.avg_quarterly_sales, tmp1.sum_sales, tmp1.i_manufact_id
         ->  Subquery Scan on tmp1  (cost=13746.37..13749.16 rows=7 width=68)
               Filter: (CASE WHEN (tmp1.avg_quarterly_sales > '0'::numeric) THEN (abs((tmp1.sum_sales - tmp1.avg_quarterly_sales)) / tmp1.avg_quarterly_sales) ELSE NULL::numeric END > 0.1)
               ->  WindowAgg  (cost=13746.37..13748.69 rows=21 width=72)
                     ->  Finalize GroupAggregate  (cost=13746.37..13748.37 rows=21 width=40)
                           Group Key: item.i_manufact_id, date_dim.d_qoy
                           ->  Gather Merge  (cost=13746.37..13747.99 rows=12 width=40)
                                 Workers Planned: 1
                                 ->  Partial GroupAggregate  (cost=12746.36..12746.63 rows=12 width=40)
                                       Group Key: item.i_manufact_id, date_dim.d_qoy
                                       ->  Sort  (cost=12746.36..12746.39 rows=12 width=14)
                                             Sort Key: item.i_manufact_id, date_dim.d_qoy
                                             ->  Nested Loop  (cost=79.33..12746.15 rows=12 width=14)
                                                   ->  Hash Join  (cost=79.19..12744.85 rows=13 width=18)
                                                         Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                         ->  Nested Loop  (cost=5.79..12664.28 rows=2730 width=18)
                                                               ->  Parallel Seq Scan on item  (cost=0.00..1627.06 rows=17 width=8)
                                                                     Filter: (((i_category = ANY ('{Books,Children,Electronics}'::bpchar[])) AND (i_class = ANY ('{personal,portable,reference,self-help}'::bpchar[])) AND (i_brand = ANY ('{"scholaramalgamalg #14","scholaramalgamalg #7","exportiunivamalg #9","scholaramalgamalg #9"}'::bpchar[]))) OR ((i_category = ANY ('{Women,Music,Men}'::bpchar[])) AND (i_class = ANY ('{accessories,classical,fragrances,pants}'::bpchar[])) AND (i_brand = ANY ('{"amalgimporto #1","edu packscholar #1","exportiimporto #1","importoamalg #1"}'::bpchar[]))))
                                                               ->  Bitmap Heap Scan on store_sales  (cost=5.79..647.50 rows=175 width=18)
                                                                     Recheck Cond: (ss_item_sk = item.i_item_sk)
                                                                     ->  Bitmap Index Scan on store_sales_pkey  (cost=0.00..5.74 rows=175 width=0)
                                                                           Index Cond: (ss_item_sk = item.i_item_sk)
                                                         ->  Hash  (cost=68.85..68.85 rows=364 width=8)
                                                               ->  Index Scan using idx_date_dim_month_seq on date_dim  (cost=0.29..68.85 rows=364 width=8)
                                                                     Index Cond: (d_month_seq = ANY ('{1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197}'::integer[]))
                                                   ->  Memoize  (cost=0.15..0.16 rows=1 width=4)
                                                         Cache Key: store_sales.ss_store_sk
                                                         Cache Mode: logical
                                                         ->  Index Only Scan using store_pkey on store  (cost=0.14..0.15 rows=1 width=4)
                                                               Index Cond: (s_store_sk = store_sales.ss_store_sk)
(32 rows)

 i_manufact_id | sum_sales | avg_quarterly_sales  
---------------+-----------+----------------------
           204 |     99.95 | 267.3800000000000000
           204 |    227.21 | 267.3800000000000000
           204 |    334.61 | 267.3800000000000000
           204 |    407.75 | 267.3800000000000000
           315 |    178.54 | 330.5675000000000000
           315 |    254.43 | 330.5675000000000000
           315 |    257.74 | 330.5675000000000000
           315 |    631.56 | 330.5675000000000000
           989 |    108.30 | 335.5450000000000000
           989 |    170.25 | 335.5450000000000000
           989 |    402.76 | 335.5450000000000000
           989 |    660.87 | 335.5450000000000000
             7 |    147.38 | 343.7950000000000000
             7 |    224.81 | 343.7950000000000000
             7 |    493.21 | 343.7950000000000000
             7 |    509.78 | 343.7950000000000000
           632 |     83.35 | 348.4475000000000000
           632 |    283.20 | 348.4475000000000000
           632 |    405.28 | 348.4475000000000000
           632 |    621.96 | 348.4475000000000000
           911 |    275.70 | 351.2850000000000000
           911 |    310.29 | 351.2850000000000000
           911 |    494.17 | 351.2850000000000000
           696 |    125.51 | 356.7900000000000000
           696 |    220.56 | 356.7900000000000000
           696 |    248.09 | 356.7900000000000000
           696 |    833.00 | 356.7900000000000000
           850 |    246.01 | 358.5675000000000000
           850 |    264.73 | 358.5675000000000000
           850 |    285.87 | 358.5675000000000000
           850 |    637.66 | 358.5675000000000000
            23 |    270.42 | 360.4650000000000000
            23 |    432.74 | 360.4650000000000000
           360 |    203.15 | 364.4675000000000000
           360 |    277.72 | 364.4675000000000000
           360 |    623.06 | 364.4675000000000000
           678 |     54.98 | 365.6875000000000000
           678 |    225.74 | 365.6875000000000000
           678 |    311.56 | 365.6875000000000000
           678 |    870.47 | 365.6875000000000000
            99 |     74.28 | 370.4075000000000000
            99 |    258.40 | 370.4075000000000000
            99 |    802.96 | 370.4075000000000000
            64 |    172.85 | 370.8900000000000000
            64 |    209.19 | 370.8900000000000000
            64 |    717.48 | 370.8900000000000000
           533 |    299.59 | 371.3950000000000000
           533 |    323.81 | 371.3950000000000000
           533 |    506.22 | 371.3950000000000000
             2 |    150.08 | 372.3225000000000000
             2 |    320.88 | 372.3225000000000000
             2 |    324.53 | 372.3225000000000000
             2 |    693.80 | 372.3225000000000000
             8 |    110.29 | 373.5000000000000000
             8 |    256.18 | 373.5000000000000000
             8 |    777.95 | 373.5000000000000000
           860 |    163.88 | 383.2800000000000000
           860 |    276.78 | 383.2800000000000000
           860 |    672.63 | 383.2800000000000000
           424 |    267.30 | 392.3225000000000000
           424 |    274.37 | 392.3225000000000000
           424 |    315.44 | 392.3225000000000000
           424 |    712.18 | 392.3225000000000000
           775 |    306.00 | 393.3925000000000000
           775 |    456.79 | 393.3925000000000000
           362 |    233.77 | 399.0525000000000000
           362 |    289.40 | 399.0525000000000000
           362 |    504.16 | 399.0525000000000000
           362 |    568.88 | 399.0525000000000000
           796 |    167.30 | 404.8325000000000000
           796 |    233.21 | 404.8325000000000000
           796 |    315.72 | 404.8325000000000000
           796 |    903.10 | 404.8325000000000000
           812 |    159.87 | 405.3375000000000000
           812 |    248.27 | 405.3375000000000000
           812 |    559.88 | 405.3375000000000000
           812 |    653.33 | 405.3375000000000000
           534 |    358.45 | 411.3225000000000000
           534 |    521.10 | 411.3225000000000000
           415 |    179.94 | 412.0475000000000000
           415 |    275.04 | 412.0475000000000000
           415 |    808.06 | 412.0475000000000000
           266 |    161.75 | 413.5525000000000000
           266 |    341.04 | 413.5525000000000000
           266 |    571.87 | 413.5525000000000000
           266 |    579.55 | 413.5525000000000000
           308 |    257.06 | 417.2100000000000000
           308 |    317.87 | 417.2100000000000000
           308 |    348.89 | 417.2100000000000000
           308 |    745.02 | 417.2100000000000000
            35 |    109.84 | 422.3550000000000000
            35 |    123.75 | 422.3550000000000000
            35 |    212.13 | 422.3550000000000000
            35 |   1243.70 | 422.3550000000000000
           955 |    187.40 | 430.7425000000000000
           955 |    312.07 | 430.7425000000000000
           955 |    812.81 | 430.7425000000000000
           542 |    192.50 | 430.7975000000000000
           542 |    383.27 | 430.7975000000000000
           542 |    755.77 | 430.7975000000000000
(100 rows)

